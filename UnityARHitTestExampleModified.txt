using System;
using System.Collections.Generic;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace UnityEngine.XR.iOS
{
    public class UnityARHitTestExample : MonoBehaviour
    {
        public Transform m_HitTransform;
        public float maxRayDistance = 30.0f;
        public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer

        public GameObject groundPrefab;
        public GameObject groundPrefab2;
        public GameObject groundPrefab3;
        public GameObject groundPrefab4;
        public GameObject treePrefab;
        public GameObject wallPrefab;
        public GameObject wallPrefab2;
        public ChooseGrass grassScript;

        private TextManager _messageSender;



        bool HitTestWithResultType(ARPoint point, ARHitTestResultType resultTypes)
        {
            List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest(point, resultTypes);
            if (hitResults.Count > 0)
            {
                foreach (var hitResult in hitResults)
                {
                    Debug.Log("Got hit!");
                    m_HitTransform.position = UnityARMatrixOps.GetPosition(hitResult.worldTransform);
                    m_HitTransform.rotation = UnityARMatrixOps.GetRotation(hitResult.worldTransform);
                    Debug.Log(string.Format("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));
                    return true;
                }
            }
            return false;
        }

        private bool IsPointerOverUIObject()
        {
            PointerEventData eventDataCurrentPosition = new PointerEventData(EventSystem.current);
            eventDataCurrentPosition.position = new Vector2(Input.mousePosition.x, Input.mousePosition.y);
            List<RaycastResult> results = new List<RaycastResult>();
            EventSystem.current.RaycastAll(eventDataCurrentPosition, results);
            return results.Count > 0;
        }
        //&& !IsPointerOverUIObject())

        private void Awake()
        {
            grassScript = GameObject.FindGameObjectWithTag("CanvasUI").GetComponent<ChooseGrass>();
            _messageSender = FindObjectOfType<TextManager>();
            //_messageSender.OnStatusChange += StatusChangeHandler;
        }

        // Update is called once per frame
        void Update()
        {

#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
            if (Input.GetMouseButtonDown(0))
            {
                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
                RaycastHit hit;

                //we'll try to hit one of the plane collider gameobjects that were generated by the plugin
                //effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
                if (Physics.Raycast(ray, out hit, maxRayDistance, collisionLayer))
                {
                    //we're going to get the position from the contact point
                    m_HitTransform.position = hit.point;
                    Debug.Log(string.Format("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));

                    //and the rotation from the transform of the plane collider
                    m_HitTransform.rotation = hit.transform.rotation;
                    //var touch = Vector3.ProjectOnPlane
                }


            }

#else
            //if (grassScript.renderNow && m_HitTransform != null)
            if (m_HitTransform != null)
            {

                Ray ray2 = Camera.main.ViewportPointToRay(new Vector3(0.5F, 0.5F, 0));
                RaycastHit hit;

                StartManager isReadyObject = GameObject.FindWithTag("CanvasUI").GetComponent<StartManager>();


                if (Physics.Raycast(ray2, out hit))
                {
                    if (!isReadyObject.isReady)
                    {
                        isReadyObject.isReady = true;

                        Button startButton = GameObject.FindGameObjectWithTag("StartButton").transform.GetComponent<Button>();

                        startButton.image.enabled = true;
                        startButton.interactable = true;

                        _messageSender.ARStatus = "Tap to start";
                    }


                    if (grassScript.renderNow)
                    {
                        var screenPosition = hit.point;
                        bool isHorizontal = HitIsHorizontal(hit.transform.up);
                        GameObject feature;

                        if (isHorizontal)
                        {
                            GameObject[] posObjects = { groundPrefab, groundPrefab2, groundPrefab3, groundPrefab4, treePrefab };
                            feature = posObjects[PickRandomIndex(posObjects.Length)];
                        }
                        else
                        {
                            GameObject[] posObjectsVert = { wallPrefab, wallPrefab2 };
                            feature = posObjectsVert[PickRandomIndex(posObjectsVert.Length)];
                        }


                        GameObject checkObject = GameObject.FindGameObjectWithTag("SpawnLord");
                        SpawnCheck spawn = checkObject.GetComponent<SpawnCheck>();
                        spawn.GrabObjects();
                        bool checkHold = spawn.IsOutOfRange(hit.point, isHorizontal, spawn.minRange);

                        if (checkHold)
                        {
                            GameObject go = Instantiate(feature, hit.point, hit.transform.rotation);
                            if (isHorizontal && feature != groundPrefab)
                            {
                                Instantiate(groundPrefab, hit.point, hit.transform.rotation);
                            }

                        }
                        else
                        {
                            //Debug.Log("other objects are too close");
                        }

                        ARPoint point = new ARPoint
                        {
                            x = screenPosition.x,
                            y = screenPosition.y
                        };

                        // prioritize reults types
                        ARHitTestResultType[] resultTypes = {
                        //ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingGeometry,
                        //ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent,
                        // if you want to use infinite planes use this:
                        //ARHitTestResultType.ARHitTestResultTypeExistingPlane,
                        ARHitTestResultType.ARHitTestResultTypeEstimatedHorizontalPlane,
                        ARHitTestResultType.ARHitTestResultTypeEstimatedVerticalPlane,
                        //ARHitTestResultType.ARHitTestResultTypeFeaturePoint
                    };

                        foreach (ARHitTestResultType resultType in resultTypes)
                        {
                            if (HitTestWithResultType(point, resultType))
                            {
                                return;
                            }
                        }
                    }

                }


                else
                {
                    //Debug.Log("I'm looking at nothing!");
                }
            }


#endif

        }

        private bool HitIsHorizontal(Vector3 upAngle)
        {
            return (Math.Abs(upAngle.y - 1) <= 0.0001);
        }

        private int PickRandomIndex(int index)
        {
            int pick = Random.Range(0, index);
            return pick;
        }



    }
}
